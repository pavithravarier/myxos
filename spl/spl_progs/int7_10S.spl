alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias i S13;
alias nextPID S8;	
alias PCB S7;
		
if (sysCallNo == 10 || sysCallNo == 14) then			// To reduce number of code pages
	
	i = 0;
	while (i < 32) do			// Signal all processes waiting for current one
		if ([READY_LIST + 32 * i + 1] == 100 + (PTBR-1024)/8) then
			[READY_LIST + 32 * i + 1] = 1;		// set process state to ready
		endif;
		i = i + 1;	
	endwhile;

	if (sysCallNo == 14) then
		//print("Signal done");
		[physicalSP - 2] = 0;
		ireturn;
	endif;
endif;


if (sysCallNo == 10 || sysCallNo == 13) then			// To reduce nummber of code pages
	nextPID = 0;
	while (nextPID < 32) do			// Check if this is the only process
		if ([READY_LIST + 32*nextPID + 1] == 1) then		// check if ready
			break;
		endif;
		nextPID = nextPID + 1;
	endwhile;

endif;



if (sysCallNo == 10) then 		// Code for exit()
	//print("Exiting");
	
	if (nextPID == 32) then
		print("No other process");
		halt;
	endif;


	i = 0;
	while (i < 8) do 				// Close all files opened by current process
		PCB = READY_LIST + 32*(PTBR - 1024)/8;		
		if ([PCB + 15 + i*2] != -1) then			// Decrement SWOFT count
			[FILE_TABLE + [PCB + 15 + i*2]*2 + 1] = [FILE_TABLE + [PCB + 15 + i*2]*2 + 1] - 1;
			
			if ([FILE_TABLE + [PCB + 15 + i*2]*2 + 1] == 0) then		// Invalidate entry
				[FILE_TABLE + [PCB + 15 + i*2]*2] = -1;
			endif;

			[PCB + 15 + i*2] = -1;		// Invalidate PPOFT entries
			[PCB + 15 + i*2 + 1] = -1;
		endif;
		i = i+1;
	endwhile;

	[PCB + 1] = 0;			// Process terminated

	i = 0;
	while (i < 4) do 		// Free used pages
		if ([PTBR + i*2] == -1) then		// Already invalid
			i = i+1;
			continue;
		endif;

		if ([PTBR + i*2 + 1] == "01" || [PTBR + i*2 + 1] == "11") then		// Decrement memory shared count
			[MEM_LIST + [PTBR + i*2]] = [MEM_LIST + [PTBR + i*2]] - 1;
		endif;

		if ([PTBR + i*2 + 1] == "00" && [PTBR + i*2 ] > 447) then			// Decrement swap shared count
			[DISK_LIST + [PTBR + i*2]] = [DISK_LIST + [PTBR + i*2]] - 1;
			store(6, 20);
		endif;

		[PTBR + i*2] = -1;
		[PTBR + i*2 + 1] = "00";
		i = i+1;
	endwhile;

	// Remaining code below 

endif;


if (sysCallNo == 13) then		// Code for Wait()
	alias waitingPID S3;
	waitingPID = [physicalSP - 3];

	if ([READY_LIST + waitingPID*32 + 1] == 0 || [READY_LIST + waitingPID*32 + 1] == 2) then		//process running or terminated
		print("Error waiting");
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	alias PID S4;
	PID = (PTBR - 1024)/8;
	[READY_LIST + PID*32 + 1] = 100 + waitingPID;	// change state of current process

	//print("Waiting");

	alias PCB S5;
	PCB = READY_LIST + 32*(PTBR-1024)/8;

	[ PCB + 2 ] = BP;			// Back up register values
	[ PCB + 3 ] = SP - 1;	
	[ PCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack
	[ PCB + 5 ] = PTBR;
	[ PCB + 6 ] = PTLR;
	[ PCB + 7 ] = R0;	
	[ PCB + 8 ] = R1;	
	[ PCB + 9 ] = R2;	
	[ PCB + 10 ] = R3;	
	[ PCB + 11 ] = R4;	
	[ PCB + 12 ] = R5;	
	[ PCB + 13 ] = R6;	
	[ PCB + 14 ] = R7;

	// Remaining code below
	
endif;

if (sysCallNo == 10 || sysCallNo == 13) then			// To reduce nummber of code pages
	alias nextPCB S9;
	nextPCB = READY_LIST + 32*nextPID;

	BP = [nextPCB + 2];		// Set registers
	SP = [nextPCB + 3];
	PTBR = [nextPCB + 5];	// Can't directly assign IP so skipped
	PTLR = [nextPCB + 6];
	R0 = [nextPCB + 7];
	R1 = [nextPCB + 8];
	R2 = [nextPCB + 9];
	R3 = [nextPCB + 10];
	R4 = [nextPCB + 11];
	R5 = [nextPCB + 12];
	R6 = [nextPCB + 13];
	R7 = [nextPCB + 14];

	SP = SP + 1;		// For pushing IP
	alias newphysicalSP S10;
	newphysicalSP = ([PTBR + 2*(SP/512)]*512)  + (SP % 512);
	[newphysicalSP] = [nextPCB + 4];		// put new IP on top of stack

	[nextPCB + 1] = 2;	// Set state to running

	//print([PCB]);
	//print("Exited");
endif;

ireturn;
