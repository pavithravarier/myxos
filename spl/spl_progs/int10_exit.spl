alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];//system call number found in second position of stack

alias index S2;
alias CurrentPID S3;
alias CurrentPCB S4;
alias newPCB S5;

CurrentPID = (PTBR - 1024) / 8;
CurrentPCB = READY_LIST + (CurrentPID * 32);	


if(sysCallNo == 13)then//WAIT system call
	
	alias WaitingPID S6;
	WaitingPID = [physicalSP - 3];//PID argument found in the fourth position of stack

	alias WaitingPCB S7;
	WaitingPCB = READY_LIST + (WaitingPID * 32);

	if([WaitingPCB + 1] == 0 || [WaitingPCB + 1] == 2)then//failure because the process is either terminated or running
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	[CurrentPCB  + 1] = 100 + WaitingPID;//state indicates that the current process is waiting for the process with WaitingPID to either issue signal or exit

	[CurrentPCB + 2] = BP;//saving the context of the current process
	[CurrentPCB + 3] = SP - 1;
	[CurrentPCB + 4] = [physicalSP];
	[CurrentPCB + 5] = PTBR;
	[CurrentPCB + 6] = PTLR;
	[CurrentPCB + 7] = R0;
	[CurrentPCB + 8] = R1;
	[CurrentPCB + 9] = R2;
	[CurrentPCB + 10] = R3;
	[CurrentPCB + 11] = R4;
	[CurrentPCB + 12] = R5;
	[CurrentPCB + 13] = R6;
	[CurrentPCB + 14] = R7;

	index = 0;	
	
	while (index < 32) do//searching for another ready state process
    		if ([READY_LIST + (index * 32) + 1] == 1) then   //if state of the process is ready choose it
       			newPCB = READY_LIST + (index * 32);
        		break;
    		endif; 
        	
		index = index + 1; //if not move to PCB of next process
	endwhile;

	BP = [newPCB + 2];//setting up the new process
	SP = [newPCB + 3];
	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];
	R0 = [newPCB + 7];
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];

	SP = SP + 1;//setting the IP value on top of the stack
	alias newphysicalSP S8;
	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[newphysicalSP] = [newPCB + 4];

	[newPCB + 1] = 2;//setting the state of new process
	[physicalSP - 2] = 0;
	ireturn;
	
endif;


if(sysCallNo == 14)then//SIGNAL SYSTEM CALL
	index = 0;

	while(index < 32)do	
		if([READY_LIST + (index * 32) + 1] == 100 + CurrentPID)then
			[READY_LIST + (index * 32) + 1] = 1;
		endif;
		index = index + 1;
	endwhile;

	[physicalSP - 2] = 0;
	ireturn;
endif;
	

//if(sysCallNo == 10)then EXIT SYSTEM CALL
	index = 0;

	while(index < 32)do//making all processes waiting for the current process ready state	
		if([READY_LIST + (index * 32) + 1] == 100 + CurrentPID)then
			[READY_LIST + (index * 32) + 1] = 1;
		endif;
		index = index + 1;
	endwhile;

	
	index = 0;	
	
	while (index < 32) do//searching for another ready state process
    		if ([READY_LIST + (index * 32) + 1] == 1) then   //if state of the process is ready choose it
       			newPCB = READY_LIST + (index * 32);
        		break;
    		endif; 
        	
		index = index + 1; //if not move to PCB of next process
	endwhile;
	
	if(index == 32) then//the only process invoked exit sys call
    		halt;
		ireturn;
	endif;

	alias syswideentry S6;
	index = 0;//closing all the files opened by the currently running process
	
	while(index < 8)do
		if([CurrentPCB + 15 + (index * 2)] != -1)then//pointer to system wide open file table is valid
			syswideentry = FILE_TABLE + (2 * [CurrentPCB + 15 + (index * 2)]);

			[syswideentry + 1] = [syswideentry + 1] - 1;//decreementing the file open count

			if([syswideentry + 1] == 0)then//invalidating the system wide open file table entry
				[syswideentry] = -1;
			endif;
	
			[CurrentPCB + 15 + (index * 2)] = -1;//invalidating the corresponding per-process open file table entry 
			[CurrentPCB + 15 + (index * 2) + 1] = -1;
		endif;
		index = index + 1;
	endwhile;
	
	[CurrentPCB + 1] = 0;//setting the terminated state to the process

	alias page S7;//freeing up the pages of the process
	alias block S8;
	index = 0;
	while(index < 4)do

		if([PTBR + (index * 2) + 1] == "01" || [PTBR + (index * 2) + 1] == "11")then
			page = [PTBR + (index * 2)];
			[MEM_LIST + page] = [MEM_LIST + page] - 1;//decreementing the entry in memory free list to indicate the page is shared by one less than the number of processes
		endif;

		if([PTBR + (index * 2) + 1] == "00" || [PTBR + (index * 2) + 1] == "10")then//invalid page number instead block number
			block = [PTBR + (index * 2)];
			if(block >= 448)then
				[DISK_LIST + block] = [DISK_LIST + block] - 1;//decreementing the entry in disk free list in memory to indicate the block is shared by one less than the number of processes
			endif;
		endif;

		index = index + 1;
	endwhile;

	store(6,20);//storing the updated disk free list back to disk

	index = 0;//invalidating the page table entries of the process

	while(index < 4)do
		[PTBR + (index * 2)] = -1;
		[PTBR + (index * 2) + 1] = "00";
		index = index + 1;
	endwhile;

	BP = [newPCB + 2];//setting up the new process
	SP = [newPCB + 3];
	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];
	R0 = [newPCB + 7];
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];

	SP = SP + 1;//setting the IP value on top of the stack
	alias newphysicalSP S8;
	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[newphysicalSP] = [newPCB + 4];

	[newPCB + 1] = 2;//setting the state of new process

	ireturn;
//endif;
	 
